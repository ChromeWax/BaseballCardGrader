@page "/upload"
@using CardGraderMAUI.Services
@inject OverlayImageProcessingService OverlayProcessor
@inject NormalMapImageProcessingService NormalMapProcessor

<h2 class="text-center mt-4">🖼️ Upload 4 Card Images</h2>
<p class="text-center text-muted mb-4">Upload top, bottom, left, and right images of your card to generate a graded overlay or normal map.</p>

<div class="container">
    <div class="row justify-content-center g-4">
        @foreach (var position in new[] { "top", "bottom", "left", "right" })
        {
            <div class="col-md-3 col-sm-6 text-center">
                <label class="form-label fw-bold text-capitalize">@position</label>
                <InputFile OnChange="@(e => OnFileSelected(e, position))" class="form-control" />
            </div>
        }
    </div>

    <div class="row justify-content-center mt-5">
        <div class="col-md-6 d-grid gap-3">
            <button class="btn btn-primary btn-lg shadow" @onclick="() => GenerateImage(true)">
                Generate Overlay Image
            </button>
            <button class="btn btn-secondary btn-lg shadow" @onclick="() => GenerateImage(false)">
                Generate Normal Map
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row justify-content-center mt-5">
            <div class="col-md-8 text-center">
                <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                    <span class="visually-hidden">Processing...</span>
                </div>
                <p class="mt-3">Processing your image...</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row justify-content-center mt-5">
            <div class="col-md-8 text-center text-danger">
                <h4>⚠️ Error</h4>
                <p>@errorMessage</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(ProcessedImageBase64))
    {
        <div class="row justify-content-center mt-5">
            <div class="col-md-8 text-center">
                <h4>🖼️ Result</h4>
                <img src="@ProcessedImageBase64" class="img-fluid rounded shadow" style="margin-top: 20px;" />
            </div>
        </div>
    }
</div>

<style>
    .form-label {
    font-size: 1.1rem;
    }

    input[type="file"] {
    padding: 0.5rem;
    }

    .btn {
    font-size: 1.1rem;
    padding: 0.75rem;
    border-radius: 0.75rem;
    }

    .btn:hover {
    transform: scale(1.03);
    transition: transform 0.2s ease-in-out;
    }
</style>

@code {
    private bool isLoading = false;
    private string errorMessage = null;
    private Dictionary<string, IBrowserFile> uploadedFiles = new();
    private string ProcessedImageBase64;

    private void OnFileSelected(InputFileChangeEventArgs e, string position)
    {
        uploadedFiles[position] = e.File;
    }

    private async Task GenerateImage(bool isOverlay)
    {
        if (uploadedFiles.Count < 4)
        {
            Console.WriteLine("Please upload all 4 images.");
            return;
        }

        isLoading = true;
        errorMessage = null;
        ProcessedImageBase64 = null;

        try
        {
            using var processedStream = isOverlay
                ? await OverlayProcessor.GenerateImage(uploadedFiles)
                : await NormalMapProcessor.GenerateImage(uploadedFiles);

            using var ms = new MemoryStream();
            await processedStream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            ProcessedImageBase64 = $"data:image/jpeg;base64,{base64}";
        }
        catch (Exception ex)
        {
            errorMessage = "Error generating image. Please try again.";
            Console.Error.WriteLine($"[Image Error] {ex}");
        }
        finally
        {
            isLoading = false;
        }

        
    }
}
