@page "/"
@using Plugin.BLE
@using Plugin.BLE.Abstractions
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.Exceptions

<h1>ESP32 Test</h1>

@switch (_connectionState)
{
    case ConnectionState.Disconnected:
        <button @onclick="ConnectToEsp32">Connect to Esp32</button>
        break;
    case ConnectionState.Scanning:
        <p>Scanning for Esp32...</p>
        break;
    case ConnectionState.Connected:
        <p>Connected to ESP32!</p>
    
        <button>Up</button>
        <button>Left</button>
        <button>Right</button>
        <button>Left</button>
        <button>Disconnect</button>
        break;
}

@if (_errorMessage is not null)
{ 
    <p style="color: red;">@_errorMessage</p>  
}

@code {
    private const string ServiceUuId = "7123acc7-b24d-4eee-9c7f-ee6302637aef";
    private enum ConnectionState
    {
        Disconnected,
        Scanning,
        Connected
    }
    
    private ConnectionState _connectionState = ConnectionState.Disconnected;
    private string? _errorMessage;
    
    private IBluetoothLE ble;    
    private IAdapter adapter;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ble = CrossBluetoothLE.Current;
        adapter = CrossBluetoothLE.Current.Adapter;
    }

    private async Task<bool> CheckBluetoothPermissions()
    {
        PermissionStatus status = await Permissions.CheckStatusAsync<Permissions.Bluetooth>();
        if (status != PermissionStatus.Granted)
        {
            status = await Permissions.RequestAsync<Permissions.Bluetooth>();
            if (status == PermissionStatus.Denied)
            {
                _errorMessage = "Location permission is required to scan for Bluetooth devices. Please enable it in the app settings.";
                StateHasChanged();
                return true;
            }
        }

        return false;
    }
    
    private bool CheckBluetoothState()
    {
        var bluetoothState = ble.State;
        switch (bluetoothState)
        {
            case BluetoothState.Unknown:
                _errorMessage = "Bluetooth state is unknown.";
                StateHasChanged();
                return true;
            case BluetoothState.Unavailable:
                _errorMessage = "Bluetooth is unavailable on this device.";
                StateHasChanged();
                return true;
            case BluetoothState.Off:
                _errorMessage = "Bluetooth is turned off. Please enable and try again.";
                StateHasChanged();
                return true;
            default:
                _errorMessage = null;
                break;
        }

        return false;
    }

    private async Task ConnectToEsp32()
    {
        // Checks permissions
        if (await CheckBluetoothPermissions()) return;

        // Checks Bluetooth state
        if (CheckBluetoothState()) return;

        adapter.DeviceDiscovered += async (s, a) =>
        {
            try
            {
                await adapter.ConnectToDeviceAsync(a.Device);
                await adapter.StopScanningForDevicesAsync();
                _connectionState = ConnectionState.Connected;
                StateHasChanged();
            }
            catch(DeviceConnectionException e)
            {
                await adapter.StopScanningForDevicesAsync();
                _connectionState = ConnectionState.Disconnected;
                _errorMessage = "Esp32 was found but could not be connected.";
                StateHasChanged();
            }
        };
        
        var scanFilterOptions = new ScanFilterOptions
        {
            ServiceUuids = [ new Guid(ServiceUuId) ]
        };
        _connectionState = ConnectionState.Scanning;
        await adapter.StartScanningForDevicesAsync(scanFilterOptions);

        if (adapter.ConnectedDevices.Count == 0)
        {
            _connectionState = ConnectionState.Disconnected;
            _errorMessage = "No Esp32 found. Please ensure it is powered on and in range.";
            StateHasChanged();
        }
    }

}