@page "/"
@using BaseballCardGrader.Maui.Services
@inject Esp32BluetoothService Esp32Service
@inject NavigationManager Navigation

<h1>ESP32 Test</h1>
<button @onclick="@(() => Navigation.NavigateTo("/CaptureAndUpload"))">Go to Capture</button>

<p>Notifications received: @_notificationCount</p>

@switch (_connectionState)
{
    case Esp32BluetoothService.ConnectionState.Disconnected:
        <button @onclick="ConnectToEsp32">Connect to Esp32</button>
        break;
    case Esp32BluetoothService.ConnectionState.Scanning:
        <p>Scanning for Esp32...</p>
        break;
    case Esp32BluetoothService.ConnectionState.Connected:
        <p>Connected to ESP32!</p>
        <button @onclick="@(() => SendCommand(nameof(Esp32BluetoothService.Esp32Command.Up)))">Up</button>
        <button @onclick="@(() => SendCommand(nameof(Esp32BluetoothService.Esp32Command.Down)))">Down</button>
        <button @onclick="@(() => SendCommand(nameof(Esp32BluetoothService.Esp32Command.Left)))">Left</button>
        <button @onclick="@(() => SendCommand(nameof(Esp32BluetoothService.Esp32Command.Right)))">Right</button>
        <button @onclick=DisconnectFromEsp32>Disconnect</button>
        break;
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red;">@_errorMessage</p>
}

@code {
    private int _notificationCount;
    private Esp32BluetoothService.ConnectionState _connectionState = Esp32BluetoothService.ConnectionState.Disconnected;
    private string? _errorMessage;

    private Action<Esp32BluetoothService.ConnectionState>? _connectionHandler;
    private Action<string?>? _errorHandler;
    private Action<Esp32BluetoothService.NotificationType>? _notificationHandler;

    protected override void OnInitialized()
    {
        _connectionHandler += state =>
        {
            _connectionState = state;
            InvokeAsync(StateHasChanged);
        };

        _errorHandler = msg =>
        {
            _errorMessage = msg;
            InvokeAsync(StateHasChanged);
        };

        _notificationHandler = type =>
        {
            _notificationCount += (type == Esp32BluetoothService.NotificationType.LedOn) ? 1 : -1;
            InvokeAsync(StateHasChanged);
        };


        Esp32Service.OnConnectionStateChanged += _connectionHandler;
        Esp32Service.OnError += _errorHandler;
        Esp32Service.OnNotification += _notificationHandler;
    }

    private async Task ConnectToEsp32() => await Esp32Service.ConnectAsync();
    private async Task SendCommand(string cmd) => await Esp32Service.SendCommandToEsp32(cmd);
    private async Task DisconnectFromEsp32() => await Esp32Service.DisconnectAsync();

    public void Dispose()
    {
        if (_connectionHandler != null)
            Esp32Service.OnConnectionStateChanged -= _connectionHandler;

        if (_errorHandler != null)
            Esp32Service.OnError -= _errorHandler;

        if (_notificationHandler != null)
            Esp32Service.OnNotification -= _notificationHandler;
    }
}
