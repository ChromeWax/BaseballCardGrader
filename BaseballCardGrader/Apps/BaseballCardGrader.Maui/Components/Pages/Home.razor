@page "/"
@using BaseballCardGrader.Maui.Services.Bluetooth
@inject IEsp32BluetoothService Esp32Service
@inject NavigationManager Navigation

<h1>ESP32 Test</h1>
<button @onclick="@(() => Navigation.NavigateTo("/CaptureAndUpload"))">Go to Capture</button>

<p>Notifications received: @_notificationCount</p>

@switch (_connectionState)
{
    case BluetoothConnectionState.Disconnected:
        <button @onclick="ConnectToEsp32">Connect to Esp32</button>
        break;
    case BluetoothConnectionState.Scanning:
        <p>Scanning for Esp32...</p>
        break;
    case BluetoothConnectionState.Connected:
        <p>Connected to ESP32!</p>
        <button @onclick="@(() => SendCommand(nameof(BluetoothCommand.Up)))">Up</button>
        <button @onclick="@(() => SendCommand(nameof(BluetoothCommand.Down)))">Down</button>
        <button @onclick="@(() => SendCommand(nameof(BluetoothCommand.Left)))">Left</button>
        <button @onclick="@(() => SendCommand(nameof(BluetoothCommand.Right)))">Right</button>
        <button @onclick=DisconnectFromEsp32>Disconnect</button>
        break;
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p style="color:red;">@_errorMessage</p>
}

@code {
    private int _notificationCount;
    private BluetoothConnectionState _connectionState = BluetoothConnectionState.Disconnected;
    private string? _errorMessage;

    private async Task ConnectToEsp32() => await Esp32Service.ConnectAsync();
    private async Task SendCommand(string cmd) => await Esp32Service.SendCommandToEsp32(cmd);
    private async Task DisconnectFromEsp32() => await Esp32Service.DisconnectAsync();
    
    protected override void OnInitialized()
    {
        Esp32Service.OnConnectionStateChanged += OnConnectionStateChanged;
        Esp32Service.OnError += OnError;
        Esp32Service.OnNotification += OnNotification;
    }

    public void Dispose()
    {
        Esp32Service.OnConnectionStateChanged -= OnConnectionStateChanged;
        Esp32Service.OnError -= OnError;
        Esp32Service.OnNotification -= OnNotification;
    }
    
    private void OnConnectionStateChanged(BluetoothConnectionState state)
    {
        _connectionState = state;
        InvokeAsync(StateHasChanged);
    }
    
    private void OnError(string message)
    {
        _errorMessage = message;
        InvokeAsync(StateHasChanged);
    }
    
    private void OnNotification(BluetoothNotificationType type)
    {
        _notificationCount += (type == BluetoothNotificationType.LedOn) ? 1 : -1;
        InvokeAsync(StateHasChanged);
    }
}
