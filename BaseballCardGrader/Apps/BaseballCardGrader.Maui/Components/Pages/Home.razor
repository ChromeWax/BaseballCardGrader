@page "/"
@using BaseballCardGrader.Maui.Services
@inject Esp32BluetoothService Esp32Service
@inject NavigationManager Navigation

<h1>ESP32 Test</h1>
<button @onclick="@(() => Navigation.NavigateTo("/CaptureAndUpload"))">Go to Capture</button>

<p>Notifications received: @_notificationCount</p>

@switch (_connectionState)
{
    case Esp32BluetoothService.ConnectionState.Disconnected:
                <button @onclick="ConnectToEsp32">Connect to Esp32</button>
        break;
    case Esp32BluetoothService.ConnectionState.Scanning:
                <p>Scanning for Esp32...</p>
        break;
    case Esp32BluetoothService.ConnectionState.Connected:
                <p>Connected to ESP32!</p>
                <button @onclick="@(() => SendCommand(nameof(Esp32BluetoothService.NotificationType.LedOn)))">Up</button>
                <button @onclick="@(() => SendCommand(nameof(Esp32BluetoothService.NotificationType.LedOff)))">Down</button>
                <button @onclick=DisconnectFromEsp32>Disconnect</button>
        break;
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
        <p style="color:red;">@_errorMessage</p>
}

@code {
    private int _notificationCount;
    private Esp32BluetoothService.ConnectionState _connectionState = Esp32BluetoothService.ConnectionState.Disconnected;
    private string? _errorMessage;

    protected override void OnInitialized()
    {
        Esp32Service.OnConnectionStateChanged += state =>
        {
            _connectionState = state;
            InvokeAsync(StateHasChanged);
        };

        Esp32Service.OnError += msg =>
        {
            _errorMessage = msg;
            InvokeAsync(StateHasChanged);
        };

        Esp32Service.OnNotification += type =>
        {
            _notificationCount += (type == Esp32BluetoothService.NotificationType.LedOn) ? 1 : -1;
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task ConnectToEsp32() => await Esp32Service.ConnectAsync();
    private async Task SendCommand(string cmd) => await Esp32Service.SendCommandAsync(cmd);
    private async Task DisconnectFromEsp32() => await Esp32Service.DisconnectAsync();

    public void Dispose() => Esp32Service.Dispose();
}
