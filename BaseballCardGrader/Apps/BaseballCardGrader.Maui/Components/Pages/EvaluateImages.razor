@page "/EvaluateImages"
@using System.Globalization
@using BaseballCardGrader.Maui.Helpers
@using BaseballCardGrader.Maui.Services.Bluetooth
@using BaseballCardGrader.Maui.State
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Storage
@using ImageProcessor.Features.AnnotateNormalImageForDefects
@using ImageProcessor.Features.ConvertFourImagesToNormalMap
@using Mediator
@using SkiaSharp
@implements IDisposable

@inject ISender Sender
@inject ApplicationState ApplicationState
@inject NavigationManager NavigationManager
@inject IEsp32BluetoothService Esp32BluetoothService

@if (IsEvaluating)
{
    <div class="container py-5">
        <div class="d-flex flex-column align-items-center text-center">
            <div class="spinner-border text-primary mb-3" role="status" aria-hidden="true"></div>
            <p class="lead mb-0">Evaluating images...</p>
        </div>
    </div>
}
else
{
    <div class="container py-4">
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>@_error</div>
            </div>
        }

        @if (!string.IsNullOrEmpty(_normalMapImage))
        {
            <div class="row g-4">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Normal Image</h5>
                        </div>
                        <div class="card-body text-center">
                            <img src="data:image/jpeg;base64,@_normalMapImage" alt="NormalMap Image" class="img-fluid rounded border" style="max-height: 480px; object-fit: contain;" />
                            <button class="btn btn-primary" @onclick="@(() => SaveFile(_normalMapBitmap, "normal"))" disabled="@IsEvaluating">
                                <i class="bi bi-bluetooth me-1"></i>Save Normal Image
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(_annotatedImage))
        {
            <div class="row g-4">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Evaluated Image</h5>
                        </div>
                        <div class="card-body text-center">
                            <img src="data:image/jpeg;base64,@_annotatedImage" alt="Evaluated Image" class="img-fluid rounded border" style="max-height: 480px; object-fit: contain;" />
                            <button class="btn btn-primary" @onclick="@(() => SaveFile(_annotatedBitmap, "annotated"))" disabled="@IsEvaluating">
                                <i class="bi bi-bluetooth me-1"></i>Save Annotated Image
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<div class="container py-3">
    <div class="d-flex justify-content-end gap-2">
        <button class="btn btn-primary" @onclick="TryAgain" disabled="@IsEvaluating">
            <i class="bi bi-arrow-repeat me-1"></i>Try Again
        </button>
        <button class="btn btn-outline-danger" @onclick="DisconnectEsp32" disabled="@IsEvaluating">
            <i class="bi bi-bluetooth me-1"></i>Disconnect ESP32
        </button>
    </div>
</div>

@code {
    private string? _normalMapImage;
    private SKBitmap? _normalMapBitmap;
    private string? _annotatedImage;
    private SKBitmap? _annotatedBitmap;
    private string? _error;
    
    private bool IsEvaluating => string.IsNullOrEmpty(_annotatedImage) && string.IsNullOrEmpty(_normalMapImage)  && string.IsNullOrEmpty(_error);
    
    protected override async Task OnInitializedAsync()
    {
        if (!ApplicationState.ImagePositionToSkBitmap.ContainsKey(ImagePosition.Top) ||
            !ApplicationState.ImagePositionToSkBitmap.ContainsKey(ImagePosition.Right) ||
            !ApplicationState.ImagePositionToSkBitmap.ContainsKey(ImagePosition.Bottom) ||
            !ApplicationState.ImagePositionToSkBitmap.ContainsKey(ImagePosition.Left))
        {
            _error = "Please capture images before evaluating.";
            return;
        }
        
        // Load images
        var allImage = ApplicationState.ImagePositionToSkBitmap[ImagePosition.All];
        var topImage = ApplicationState.ImagePositionToSkBitmap[ImagePosition.Top];
        var rightImage = ApplicationState.ImagePositionToSkBitmap[ImagePosition.Right];
        var bottomImage = ApplicationState.ImagePositionToSkBitmap[ImagePosition.Bottom];
        var leftImage = ApplicationState.ImagePositionToSkBitmap[ImagePosition.Left];
        
        // Load the ONNX model from the app package
        await using var assetStream = await FileSystem.OpenAppPackageFileAsync("BaseballCardGraderModel.onnx");
        using var onnxMemoryStream = new MemoryStream();
        await assetStream.CopyToAsync(onnxMemoryStream);

        _normalMapBitmap = await Sender.Send(
            new ConvertFourImagesToNormalMapRequest(topImage, rightImage, bottomImage, leftImage)
        );
        _normalMapImage = ImageConversion.ConvertImageToBase64(_normalMapBitmap);
        
        // Annotate overlay image
        _annotatedBitmap = await Sender.Send(
            new AnnotateNormalMapForDefectsRequest(onnxMemoryStream, allImage, _normalMapBitmap)
        );
        _annotatedImage = ImageConversion.ConvertImageToBase64(_annotatedBitmap);
        
        StateHasChanged();
    }
    
    private async Task SaveFile(SKBitmap? image, string path)
    {
        using var data = image?.Encode(SKEncodedImageFormat.Png, 90);
        using var stream = new MemoryStream();
        data?.SaveTo(stream);
        var fileSaverResult = await FileSaver.Default.SaveAsync($"{DateTime.Now.ToString(CultureInfo.InvariantCulture)}-{path}.png", stream);
        if (fileSaverResult.IsSuccessful)
        {
            await Toast.Make($"The file was saved successfully to location: {fileSaverResult.FilePath}").Show();
        }
        else
        {
            await Toast.Make($"The file was not saved successfully with error: {fileSaverResult.Exception.Message}").Show();
        }
    }

    private void TryAgain()
    {
        ApplicationState.PipelineStep = Esp32BluetoothService.ConnectionState == BluetoothConnectionState.Connected ? PipelineStep.CaptureImages : PipelineStep.ConnectToEsp32;
        NavigationManager.NavigateTo("/");
    }
    
    private async Task DisconnectEsp32()
    {
        await Esp32BluetoothService.DisconnectAsync();
        ApplicationState.PipelineStep = PipelineStep.ConnectToEsp32;
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        _normalMapBitmap?.Dispose();
        _annotatedBitmap?.Dispose();
        _normalMapBitmap = null;
        _annotatedBitmap = null;
    }

}
