@page "/EvaluateImages"
@using BaseballCardGrader.Maui.Services
@using BaseballCardGrader.Maui.Services.ImageConversion
@using BaseballCardGrader.Maui.State
@using ImageProcessor.Features.AnnotateImageForDefects
@using ImageProcessor.Features.ConvertImageToOverlay
@using Mediator

@inject ISender Sender
@inject ApplicationState ApplicationState
@inject IImageConversionService ImageConversionService

<h3>EvaluateImages</h3>

@if (!string.IsNullOrEmpty(originalImageBase64))
{
    <div>
        <h4>Original Image</h4>
        <img src="data:image/jpeg;base64,@originalImageBase64" alt="Original Image" style="max-width:400px;" />
    </div>
}

@if (!string.IsNullOrEmpty(evaluatedImageBase64))
{
    <div>
        <h4>Evaluated Image</h4>
        <img src="data:image/png;base64,@evaluatedImageBase64" alt="Evaluated Image" style="max-width:400px;" />
    </div>
}
else
{
    <p>No evaluated image to display.</p>
}


@code {
    private string? originalImageBase64;
    private string? evaluatedImageBase64;
    
    protected override async Task OnInitializedAsync()
    {
        await EvaluateImage();
    }
    
    public async Task EvaluateImage()
    {
        // Show the original JPEG immediately
        if (ApplicationState.jpegTopImage != null && ApplicationState.jpegTopImage.Length > 0)
        {
            originalImageBase64 = Convert.ToBase64String(ApplicationState.jpegTopImage);
        }
        
        var originalRgbImage = await Task.Run(() =>
            ImageConversionService.ConvertJpegBytesToRgbImage(ApplicationState.jpegTopImage)
        );
        
        // Run the overlay + model inference on a background thread
        var modelOutput = await Task.Run(async () =>
        {
            var overlayImage = await Sender.Send(
                new ConvertImageToOverlayRequest(
                    ApplicationState.GrayscaleTopImage,
                    ApplicationState.GrayscaleBottomImage,
                    ApplicationState.GrayscaleRightImage,
                    ApplicationState.GrayscaleLeftImage
                )
            );
            
            var tempModelFile = Path.Combine(FileSystem.CacheDirectory, "BaseballCardGraderModel.onnx");

            if (!File.Exists(tempModelFile))
            {
                using var assetStream = await FileSystem.OpenAppPackageFileAsync("BaseballCardGraderModel.onnx");
                using var fileStream = File.Create(tempModelFile);
                await assetStream.CopyToAsync(fileStream);
            }

            var output = await Sender.Send(
                new AnnotateImageForDefectsRequest(
                    tempModelFile,
                    originalRgbImage,
                    overlayImage
                )
            );

            return output; // This is Image<Rgb24>
        });
        
        // await modelOutput.SaveAsPngAsync("BaseballCardGrader.Maui/Resources/Images/ModelOutput.png");
        
        // Convert Image<Rgb24> to base64 string
        evaluatedImageBase64 = await Task.Run(() => ImageConversionService.ConvertRgbImageToBase64(modelOutput));
    }
}
